services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  adminer:
    image: adminer:latest
    container_name: adminer_ui
    environment:
      ADMINER_DESIGN: hever
    ports:
      - "8090:8080"
    networks:
      - app-network
    depends_on:
      - db

  # redis:
  #   image: redis:7-alpine
  #   ports:
  #     - "6379:6379"
  #   command: redis-server --appendonly yes
  #   volumes:
  #     - redis_data:/data
  #   profiles:
  #     - with-redis
  #
  # web:
  #   build: .
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     DJANGO_SECRET_KEY: "change-me-in-production"
  #     DJANGO_DEBUG: "false"
  #     DATABASE_URL: "postgres://postgres:postgres@db:5432/app"
  #     ALLOWED_HOSTS: "*"
  #     DEFAULT_FROM_EMAIL: "no-reply@example.com"
  #     EMAIL_HOST: "mailcatcher"
  #     EMAIL_PORT: "1025"
  #     EMAIL_HOST_USER: ""
  #     EMAIL_HOST_PASSWORD: ""
  #     EMAIL_USE_TLS: "false"
  #     OPENAI_API_KEY: ""
  #     OPENAI_MODEL: "gpt-vision"
  #     OPENAI_TIMEOUT_S: "30"
  #     COST_PER_REQUEST_CENTS: "100"
  #     CORS_ALLOWED_ORIGINS: "http://localhost:5173"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/healthz')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  #   command: >
  #     sh -c "python manage.py migrate --noinput &&
  #            gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 2 --threads 4"

  mailcatcher:
    image: stpaquet/alpinemailcatcher
    ports:
      - "1080:1080"  # Web UI to view emails
      - "1025:1025"  # SMTP server port
    networks:
      - app-network

volumes:
  postgres_data:
  # redis_data:

networks:
  app-network:
    driver: bridge
